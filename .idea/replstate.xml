<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1409571105440">{:repl-history {:ide [], :local [&quot;title&quot; &quot;(seq (get-links (str \&quot;http://ru.m.wikipedia.org\&quot; url)))&quot; &quot;(zip/down wiki-zipper)&quot; &quot;wiki-zipper&quot; &quot;(-&gt; wiki-zipper (zip/down) (zip/left))&quot; &quot;(-&gt; wiki-zipper (zip/down) (zip/node) (get-title))&quot; &quot;(-&gt; wiki-zipper (zip/down) (zip/node) (str \&quot;http://ru.m.wikipedia.org\&quot;) (get-title))&quot; &quot;(defn get-title [url]\n  (let [html (html/html-snippet (:body @(http/get url)))]\n    (first (:content (first (html/select html [:h1#section_0]))))))&quot; &quot;(-&gt; wiki-zipper (zip/down) (zip/node) (apply str \&quot;http://ru.m.wikipedia.org\&quot;))&quot; &quot;(-&gt; wiki-zipper (zip/down) (zip/node) (str \&quot;http://ru.m.wikipedia.org\&quot;))&quot; &quot;(-&gt; wiki-zipper (zip/down) (zip/node))&quot; &quot;(-&gt; wiki-zipper (zip/down) (zip/node) (str \&quot;lol\&quot;))&quot; &quot;(get-title\n  (str \&quot;http://ru.m.wikipedia.org\&quot;\n       (-&gt; wiki-zipper (zip/down) (zip/node))))&quot; &quot;(get-title\n  (str \&quot;http://ru.m.wikipedia.org\&quot;\n       (-&gt; wiki-zipper \n           (zip/down) \n           (zip/down) \n           (zip/node))))&quot; &quot;(get-title\n  (str \&quot;http://ru.m.wikipedia.org\&quot;\n       (-&gt; wiki-zipper\n           (zip/down)\n           (zip/down)\n           (zip/down)\n           (zip/node))))&quot; &quot;(get-title\n  (str \&quot;http://ru.m.wikipedia.org\&quot;\n       (-&gt; wiki-zipper\n           (zip/down)\n           (zip/right)\n           (zip/down)\n           (zip/node))))&quot; &quot;(defn link-pred [link]\n  (and (&lt; 6 (count link))\n       (= \&quot;/wiki/\&quot; (subs link 0 6))\n       (not (some #(contains? #{\\. \\:} %) link))))&quot; &quot;(str \&quot;http://ru.m.wikipedia.org\&quot;\n     (-&gt; wiki-zipper\n         (zip/down)\n         (zip/right)\n         (zip/right)\n         (zip/down)\n         (zip/node)))&quot; &quot;(get-title\n  (str \&quot;http://ru.m.wikipedia.org\&quot;\n       (-&gt; wiki-zipper\n           (zip/down)\n           (zip/right)\n           (zip/right)\n           (zip/down)\n           (zip/node))))&quot; &quot;(defn construct-path [node]\n  (take-while (not nil?) (iterate zip/root node)))&quot; &quot;(defn construct-path [node]\n  (take-while (not nil?) (iterate zip/up node)))&quot; &quot;(defn construct-path [node]\n  (take-while #(not (nil? %)) (iterate zip/up node)))&quot; &quot;(defn get-title [url]\n  (let [html (html/html-snippet (:body @(http/get (str \&quot;http://ru.m.wikipedia.org\&quot; url))))]\n    (first (:content (first (html/select html [:h1#section_0]))))))&quot; &quot;(construct-path (-&gt; wiki-zipper\n                    (zip/down)\n                    (zip/right)\n                    (zip/right)\n                    (zip/down)\n                    (zip/node)))&quot; &quot;(get-title\n  (construct-path (-&gt; wiki-zipper\n                      (zip/down)\n                      (zip/right)\n                      (zip/right)\n                      (zip/down)\n                      (zip/node))))&quot; &quot;(type\n  (construct-path (-&gt; wiki-zipper\n                      (zip/down)\n                      (zip/right)\n                      (zip/right)\n                      (zip/down)\n                      (zip/node))))&quot; &quot;(count\n  (construct-path (-&gt; wiki-zipper\n                      (zip/down)\n                      (zip/right)\n                      (zip/right)\n                      (zip/down)\n                      (zip/node))))&quot; &quot;(print\n  (construct-path (-&gt; wiki-zipper\n                      (zip/down)\n                      (zip/right)\n                      (zip/right)\n                      (zip/down)\n                      (zip/node))))&quot; &quot;(def a (-&gt; wiki-zipper\n           (zip/down)\n           (zip/right)\n           (zip/right)\n           (zip/down)\n           (zip/node)))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/right)\n    (zip/right)\n    (zip/down)\n)&quot; &quot;(def a (-&gt; wiki-zipper\n           (zip/down)\n           (zip/right)\n           (zip/right)\n           (zip/down)\n           ))&quot; &quot;(zip/up a)&quot; &quot;(def Ð¸ (construct-path (-&gt; wiki-zipper\n                           (zip/down)\n                           (zip/right)\n                           (zip/right)\n                           (zip/down))))&quot; &quot;(def b (construct-path (-&gt; wiki-zipper\n                           (zip/down)\n                           (zip/right)\n                           (zip/right)\n                           (zip/down))))&quot; &quot;(count b)&quot; &quot;(first b\n       )&quot; &quot;(map (comp get-title first) b)&quot; &quot;(defn construct-path [node]\n  (map (comp get-title first)\n       (take-while #(not (nil? %)) (iterate zip/up node))))&quot; &quot;(defn construct-path [node]\n  (reverse\n    (map (comp get-title first)\n         (take-while #(not (nil? %)) (iterate zip/up node)))))&quot; &quot;(defn construct-path [node]\n  (reverse\n    (map (comp #(str \&quot;[\&quot; % \&quot;]\&quot;) get-title first)\n         (take-while #(not (nil? %)) (iterate zip/up node)))))&quot; &quot;(defn construct-path [node]\n  (interpose \&quot; -&gt; \&quot;\n             (reverse\n               (map (comp #(str \&quot;[\&quot; % \&quot;]\&quot;) get-title first)\n                    (take-while #(not (nil? %)) (iterate zip/up node))))))&quot; &quot;(construct-path (-&gt; wiki-zipper\n                    (zip/down)\n                    (zip/right)\n                    (zip/right)\n                    (zip/down)))&quot; &quot;(str\n  (construct-path (-&gt; wiki-zipper\n                      (zip/down)\n                      (zip/right)\n                      (zip/right)\n                      (zip/down))))&quot; &quot;(take-while #(not= \&quot;/wiki/Microsoft\&quot; %) (iterate zip/next wiki-zipper))&quot; &quot;(stop)&quot; &quot;(+ 1 2 )&quot; &quot;(take-while #(not= \&quot;/wiki/Microsoft\&quot; (first %)) (iterate zip/next wiki-zipper))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/children)\n    (count))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/left)\n    (zip/children)\n    (count))&quot; &quot;(def wiki-zipper\n  (zip/zipper\n    (constantly true)\n    (fn [node] (seq (get-links (str \&quot;http://ru.m.wikipedia.org\&quot; node))))\n    nil\n    url))&quot; &quot;(defn construct-path [node]\n  \&quot;Return lazy seq of path of page titles from root to current node\&quot;\n  (interpose \&quot; -&gt; \&quot;\n             (reverse\n               (map (comp #(str \&quot;[\&quot; % \&quot;]\&quot;) get-title first)\n                    (take-while (complement nil?) (iterate zip/up node))))))&quot; &quot;(defn get-links [url]\n  \&quot;Return all wiki links from url page\&quot;\n  (let [html-page (html/html-snippet (:body @(http/get url)))]\n    (filter link-pred (map (comp :href :attrs) (html/select html-page [:div.content :a])))))&quot; &quot;(defn link-pred [link]\n  \&quot;Rules for link to wiki document\&quot;\n  (and (&lt; 6 (count link))\n       (= \&quot;/wiki/\&quot; (subs link 0 6))\n       (not (some #(contains? #{\\. \\:} %) link))))&quot; &quot;(defn get-title [url]\n  \&quot;Return title of page by url. Need http request.\&quot;\n  (let [html (html/html-snippet (:body @(http/get (str \&quot;http://ru.m.wikipedia.org\&quot; url))))]\n    (first (:content (first (html/select html [:h1#section_0]))))))&quot; &quot;(def url \&quot;/wiki/SAP\&quot;)&quot; &quot;(get-title\n  (-&gt; wiki-zipper\n      (zip/down)\n      (zip/right)\n      (zip/right)\n      (zip/down)\n      (zip/node)))&quot; &quot;(-&gt; wiki-zipper\n    (zip/node))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (count))&quot; &quot;(map zip/children wiki-zipper)&quot; &quot;(map zip/children (zip/node wiki-zipper))&quot; &quot;(map (zip/children) (zip/node wiki-zipper))&quot; &quot;(map #(zip/children %) (zip/node wiki-zipper))&quot; &quot;(map zip/children (zip/root wiki-zipper))&quot; &quot;(map zip/children (zip/down wiki-zipper))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/right)\n    (zip/right)\n    (zip/down)\n    (zip/path))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/right)\n    (zip/right)\n    (zip/down)\n    (zip/path)\n    (count))&quot; &quot;(defn construct-path [node]\n  \&quot;Return lazy seq of path of page titles from root to current node\&quot;\n  (interpose \&quot; -&gt; \&quot;             \n             (map (comp #(str \&quot;[\&quot; % \&quot;]\&quot;) get-title first)\n                  (concat (zip/path node) [(zip/node node)]))))&quot; &quot;(map inc [1 2 3] [4])&quot; &quot;(map inc (concat [1 2 3] [4]))&quot; &quot;(defn construct-path [node]\n  \&quot;Return lazy seq of path of page titles from root to current node\&quot;\n  (interpose \&quot; -&gt; \&quot;\n             (map (comp #(str \&quot;[\&quot; % \&quot;]\&quot;) get-title)\n                  (apply list (zip/path node) (zip/node node)))))&quot; &quot;(defn construct-path [node]\n  \&quot;Return lazy seq of path of page titles from root to current node\&quot;\n  (interpose \&quot; -&gt; \&quot;\n             (map (comp #(str \&quot;[\&quot; % \&quot;]\&quot;) get-title)\n                  (apply vector (zip/path node) (zip/node node)))))&quot; &quot;(defn construct-path [node]\n  \&quot;Return lazy seq of path of page titles from root to current node\&quot;\n  (interpose \&quot; -&gt; \&quot;             \n             (map (comp #(str \&quot;[\&quot; % \&quot;]\&quot;) get-title)\n                  (concat (zip/path node) [(zip/node node)]))))&quot; &quot;(print\n  (construct-path (-&gt; wiki-zipper\n                      (zip/down)\n                      (zip/right)\n                      (zip/right)\n                      (zip/down))))&quot; &quot;(def a (zip/vector-zip [:a [[:b] [:c]]]))&quot; &quot;a&quot; &quot;(-&gt; a \n    (zip/node))&quot; &quot;(-&gt; a \n    (zip/down))&quot; &quot;(-&gt; a \n    (zip/down)\n    (zip/left))&quot; &quot;(def a (zip/vector-zip [:a [:b] [:c] [:d]]))&quot; &quot;(-&gt; a \n    (zip/down)\n    (zip/right)\n    (zip/right))&quot; &quot;(-&gt; a \n    (zip/down)\n    (zip/right))&quot; &quot;(-&gt; a \n    (zip/down)\n    )&quot; &quot;(def a (zip/vector-zip [:a [:b [1 2 3]] [:c [4 5 6]] [:d [7 8 9]]]))&quot; &quot;(-&gt; a \n    \n    (zip/down)\n    (zip/right))&quot; &quot;(-&gt; a \n    (zip/down)\n    (zip/down)\n    (zip/right))&quot; &quot;(-&gt; a \n    (zip/down)\n    (zip/down))&quot; &quot;(-&gt; (zip/vector-zip [:a [:b [1 2 3]] [:c [4 5 6]] [:d [7 8 9]]])\n    (zip/down))&quot; &quot;(-&gt; (zip/vector-zip [:a [:b [1 2 3]] [:c [4 5 6]] [:d [7 8 9]]])\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [:a [:b [1 2 3]] [:c [4 5 6]] [:d [7 8 9]]])\n    (zip/down)\n    (zip/right)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [:a [:b [1 2 3]] [:c [4 5 6]] [:d [7 8 9]]])\n    (zip/down)\n    (zip/right)    \n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a :b :c]])\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a :b :c] [1 2 3 4]])\n    (zip/down)\n    (zip/right)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 2 3 4]])\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/down\n      )\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/right)\n    \n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/up)\n    (zip/right)    \n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/up)\n    (zip/right)\n    (zip/down)\n    \n    (zip/node))&quot;], :remote []}}</component>
</project>

