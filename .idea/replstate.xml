<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1409578590756">{:repl-history {:ide [], :local [&quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 2 3 4]])\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/down\n      )\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/down)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/right)\n    \n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/up)\n    (zip/right)    \n    (zip/node))&quot; &quot;(-&gt; (zip/vector-zip [[:a [:b :c]] [1 [2 3 4]]])\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/up)\n    (zip/right)\n    (zip/down)\n    \n    (zip/node))&quot; &quot;url&quot; &quot;(take 5 (iterate zip/next wiki-zipper))&quot; &quot;(map get-links (take 5 (iterate zip/next wiki-zipper)))&quot; &quot;(apply map get-links (take 5 (iterate zip/next wiki-zipper)))&quot; &quot;(apply map zip/node (take 5 (iterate zip/next wiki-zipper)))&quot; &quot;(map zip/node (take 5 (iterate zip/next wiki-zipper)))&quot; &quot;(map (comp get-links zip/node) (take 5 (iterate zip/next wiki-zipper)))&quot; &quot;(map (comp get-title zip/node) (take 5 (iterate zip/next wiki-zipper)))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/node)\n    (get-title))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/right)\n    (zip/node)\n    (get-title))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/rightmost)\n    (zip/node)\n    (get-title))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/right)\n    (zip/right)\n    (zip/node)\n    (get-title))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/right)\n    (zip/node)\n    (get-title))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/rightmost)\n    (zip/node)\n    (get-title))&quot; &quot;base-wiki-urk&quot; &quot;base-wiki-url&quot; &quot;(def base-wiki-url \&quot;http://ru.m.wikipedia.org\&quot;)&quot; &quot;(defn get-title [url]\n  \&quot;Return title of page by url. Need http request.\&quot;\n  (let [html (html/html-snippet (:body @(http/get (str base-wiki-url url))))]\n    (first (:content (first (html/select html [:h1#section_0]))))))&quot; &quot;(def wiki-zipper\n  (zip/zipper\n    (constantly true)\n    (fn [node] (seq (get-links (str base-wiki-url node))))\n    nil\n    url))&quot; &quot;(print\n  (construct-path (-&gt; wiki-zipper\n                      (zip/down)\n                      (zip/right)\n                      (zip/right)\n                      (zip/down))))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/rightmost)\n    (zip/left)\n    (zip/node)\n    (get-title))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/children)\n    (map get-title))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/children)\n    (map (comp get-title zip/mnode)))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/children)\n    (map (comp get-title zip/node)))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/children)\n    (map zip/node))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down)\n    (zip/children))&quot; &quot;(map get-title (-&gt; wiki-zipper\n                   (zip/down)\n                   (zip/down)\n                   (zip/children)))&quot; &quot;(count (-&gt; wiki-zipper\n                   (zip/down)\n                   (zip/down)\n                   (zip/children)))&quot; &quot;(count (-&gt; wiki-zipper\n                   (zip/down)\n                   (zip/children)))&quot; &quot;(map get-title (-&gt; wiki-zipper\n                   (zip/down)\n                   (zip/children)))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    (zip/down))&quot; &quot;(-&gt; wiki-zipper\n    (zip/down)\n    #(reduce (fn [acc x] (conj acc (zip/down x))) [] %))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (reduce (fn [acc x] (conj acc (zip/down x))) [] w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (reduce #(conj %1 (zip/down %2)) [] w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/node w)\n    (reduce #(conj %1 (zip/down %2)) [] w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/node w)\n    \n    )&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/children w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/node w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/down w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/down w)\n    (type w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/right w)\n    (type w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/right w)\n    (get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/right w)\n    (zip/node)\n    (get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/right w)\n    (zip/node)\n    )&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/right w)\n    (zip/node w)\n    )&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/right w)\n    (zip/node w)\n    (get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    \n    (zip/node w)\n    (get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/children w)\n    (get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/node w)\n    (zip/children)\n    (get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/node w)\n    (zip/children)\n    )&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/children))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/node w)\n    (zip/children w\n                  )\n    )&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/children w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/children w)\n    (first w))&quot; &quot;(as-&gt; wiki-zipper w\n    (zip/down w)\n    (zip/children w)\n    (first w)\n    (zip/down))&quot; &quot;wiki-zipper&quot; &quot;(as-&gt; wiki-zipper w\n      (zip/next w)\n      (take 10 w)\n      (map get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n      (zip/next w)\n      (take 10 w)\n      (map get-title w)\n      (doall w))&quot; &quot;(as-&gt; wiki-zipper w\n      (iterate zip/next w)\n      (take 10 w)\n      (map get-title w))&quot; &quot;(as-&gt; wiki-zipper w\n      (iterate zip/next w)\n      (take 10 w))&quot; &quot;(as-&gt; wiki-zipper w\n      (iterate zip/next w)\n      (take 10 w)\n      (map first w))&quot; &quot;(as-&gt; wiki-zipper w\n      (iterate zip/next w)\n      (take 10 w)\n      (map (comp get-title first) w))&quot; &quot;(defn bf-next [loc]\n  (if (= :end (loc 1))\n    loc\n    (or\n      (and (branch? loc) (down loc))\n      (right loc)\n      (loop [p loc]\n        (if (up p)\n          (or (right (up p)) (recur (up p)))\n          [(node p) :end])))))&quot; &quot;(defn bf-next [loc]\n  (if (= :end (loc 1))\n    loc\n    (or\n      (and (zip/branch? loc) (zip/down loc))\n      (zip/right loc)\n      (loop [p loc]\n        (if (zip/up p)\n          (or (zip/right (zip/up p)) (recur (zip/up p)))\n          [(zip/node p) :end])))))&quot; &quot;(defn bf-next [loc]\n  (if (= :end (loc 1))\n    loc\n    (or\n      (zip/right loc)\n      (loop [p loc]\n        (if (zip/up p)\n          (or (zip/right (zip/up p)) (recur (zip/up p)))\n          [(zip/node p) :end]))\n      (and (zip/branch? loc) (zip/down loc)))))&quot; &quot;(if nil 1 2)&quot; &quot;(defn bf-next [loc]\n  (if (zip/right loc)\n    (zip/right loc)\n    (if (zip/up loc)\n      (if ((comp zip/right zip/up) loc)\n        (if ((comp zip/down zip/right zip/up) loc)\n          ((comp zip/down zip/right zip/up) loc)\n          ((comp zip/down zip/leftmost zip/up) loc))\n        ((comp zip/down zip/leftmost zip/up) loc))\n      (zip/down loc))))&quot; &quot;(as-&gt; wiki-zipper w\n      (iterate bf-next w)\n      (take 10 w)\n      (map (comp get-title first) w))&quot; &quot;(def url \&quot;/wiki/Cat\&quot;)&quot; &quot;(as-&gt; (wiki-zipper url) w\n      (iterate bf-next w)\n      (take 10 w)\n      (map (comp get-title first) w))&quot; &quot;(as-&gt; (wiki-zipper url) w\n      (iterate bf-next w)\n      (take 20 w)\n      (map (comp get-title first) w))&quot; &quot;(defn bf-next [loc]\n  ;(if (zip/right loc)\n  ;  (zip/right loc)\n  ;  (if (zip/up loc)\n  ;    (if ((comp zip/right zip/up) loc)\n  ;      (if ((comp zip/down zip/right zip/up) loc)\n  ;        ((comp zip/down zip/right zip/up) loc)\n  ;        ((comp zip/down zip/leftmost zip/up) loc))\n  ;      ((comp zip/down zip/leftmost zip/up) loc))\n  ;    (zip/down loc)))\n  (or (zip/right loc)\n      (if (zip/up loc)\n        (if (-&gt; loc zip/up zip/right)\n          (-&gt; loc zip/up zip/right zip/down)\n          (-&gt; loc zip/up zip/leftmost zip/down))\n        (-&gt; loc zip/down))))&quot; &quot;(as-&gt; (wiki-zipper url) w\n      (iterate bf-next w)\n      (take 50 w)\n      (map (comp get-title first) w))&quot; &quot;(def url \&quot;/wiki/Split\&quot;)&quot; &quot;(-&gt;&gt; (wiki-zipper url)\n      (iterate bf-next)\n      (take 50)\n      (map (comp get-title first)))&quot; &quot;(-&gt;&gt; (wiki-zipper url)\n      (iterate bf-next)\n      (take 150)\n      (map (comp get-title first)))&quot; &quot;(defn link-pred [link]\n  \&quot;Rules for link to wiki document\&quot;\n  (and (string? link)\n       (&lt; 6 (count link))\n       (= \&quot;/wiki/\&quot; (subs link 0 6))\n       (not (some #(contains? #{\\. \\:} %) link))))&quot; &quot;(defn get-links [url]\n  \&quot;Return all wiki links from url page\&quot;\n  (let [html-page (html/html-snippet (:body @(http/get url)))]\n    (filter link-pred (map (comp :href :attrs) (html/select html-page [:div.content :a])))))&quot; &quot;(defn wiki-zipper [begin-url]\n  (zip/zipper\n    (constantly true)\n    (fn [node] (seq (get-links (str base-wiki-url node))))\n    nil\n    url))&quot; &quot;(defn bf-next [loc]\n  (or (zip/right loc)\n      (if (zip/up loc)\n        (if (-&gt; loc zip/up zip/right)\n          (-&gt; loc zip/up zip/right zip/down)\n          (-&gt; loc zip/up zip/leftmost zip/down))\n        (-&gt; loc zip/down))))&quot; &quot;(-&gt;&gt; (wiki-zipper url)\n      (iterate bf-next)\n      (take 250)\n      (map (comp get-title first)))&quot; &quot;(zip/seq-zip [[[1 2 3] [4 5 6]]\n              [[:a :b] [:c :d] [:e :f]]\n              [:end]])&quot; &quot;(-&gt; (zip/seq-zip [[[1 2 3] [4 5 6]]\n                  [[:a :b] [:c :d] [:e :f]]\n                  [:end]])\n    (bf-next))&quot; &quot;(-&gt; (zip/seq-zip [[[1 2 3] [4 5 6]]\n                  [[:a :b] [:c :d] [:e :f]]\n                  [:end]])\n    (zip/down)\n    (bf-next))&quot; &quot;(-&gt; (zip/seq-zip [[[1 2 3] [4 5 6]]\n                  [[:a :b] [:c :d] [:e :f]]\n                  [:end]])\n    (zip/down))&quot; &quot;(-&gt; (zip/vector-zip [[[1 2 3] [4 5 6]]\n                  [[:a :b] [:c :d] [:e :f]]\n                  [:end]])\n    (zip/down))&quot; &quot;(-&gt; (zip/vector-zip [[[1 2 3] [4 5 6]]\n                  [[:a :b] [:c :d] [:e :f]]\n                  [:end]])\n    (zip/down)\n    (bf-next))&quot; &quot;(-&gt; (zip/vector-zip [[[1 2 3] [4 5 6]]\n                  [[:a :b] [:c :d] [:e :f]]\n                  [:end]])    \n    (iterate bf-next (zip/down))\n    (take 10))&quot; &quot;(take 10 (iterate bf-next (zip/down (zip/vector-zip [[[1 2 3] [4 5 6]]\n                                             [[:a :b] [:c :d] [:e :f]]\n                                             [:end]]))))\n&quot; &quot;(map zip/node (take 10 (iterate bf-next (zip/down (zip/vector-zip [[[1 2 3] [4 5 6]]\n                                                      [[:a :b] [:c :d] [:e :f]]\n                                                      [:end]])))))\n&quot;], :remote []}}</component>
</project>

